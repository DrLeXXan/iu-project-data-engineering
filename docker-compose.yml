services:
  factory-service:
    build:
      context: ./factory
      dockerfile: Dockerfile
    container_name: factory_service
    depends_on:
      - cryptography-service
    ports:
      - "8001:8001"
    networks:
      - app-network

  verification-service:
    build:
      context: ./verification
      dockerfile: Dockerfile
    container_name: verification_service
    depends_on:
      factory-service:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - app-network

  cryptography-service:
    build:
      context: ./cryptography
      dockerfile: Dockerfile
    container_name: cryptography_service
    ports:
      - "8000:8000"
    networks:
      - app-network

  kafka:
    image: apache/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9093 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka
    networks:
      - app-network

  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: factory_user
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: factory_db
    ports:
      - "5432:5432"
    volumes:
      - ./consumer/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@postgres-iu.com
      PGADMIN_DEFAULT_PASSWORD: mypassword
    networks:
      - app-network

  bytewax:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: bytewax
    depends_on:
      factory-service:
        condition: service_started
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - app-network

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_LOG_LEVEL=warning
    ports:
      - "3000:3000"
    volumes:
      - "grafana_storage:/var/lib/grafana"

volumes:
  grafana_storage: {}

networks:
  app-network:
    driver: bridge
